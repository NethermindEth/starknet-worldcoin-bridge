use verifier::field_elements::{FQ12, FQ12Trait, FQ2, FQTrait, FQ2Trait};
use verifier::utils::testing::assert_array_result;

#[test]
fn test_fq2_add() {
    let p1 = FQ2 {
        a: FQTrait::from(
            51975646149777427225591377862541090934072341051232032113663076267066374577643
        ),
        b: FQTrait::from(3)
    };
    let p2 = FQ2 {
        a: FQTrait::from(
            35433636764249395195270674567293738806335972712693981327311940281586311300523
        ),
        b: FQTrait::from(5)
    };
    let result = p1 + p2;
    println!("Result: {:?}", result);
}

#[test]
fn test_fq2_mul() {
    let p1 = FQ2 { a: FQTrait::from(2), b: FQTrait::from(3) };
    let p2 = FQ2 { a: FQTrait::from(4), b: FQTrait::from(5) };
    let expected = FQ2Trait::from(
        21888242871839275222246405745257275088696311157297823662689037894645226208569, 22
    );

    let result = p1 * p2;

    assert!(
        result.a == expected.a && result.b == expected.b,
        "Expected: {:?}, got: {:?}",
        expected,
        result
    );
}

#[test]
fn test_fq12_mul() {
    let p1 = FQ12 {
        coeffs: array![
            51975646149777427225591377862541090934072341051232032113663076267066374577643,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
        ]
    };
    let p2 = FQ12 {
        coeffs: array![
            35433636764249395195270674567293738806335972712693981327311940281586311300523,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
        ]
    };
    let result = (p1 * p2);

    let expected: Array<u256> = array![
        20769674684598508043618041718740339409206907805908282378460349073110900242918,
        7911783259438319844851425269637999527925857006105822368722730417919484207801,
        7911783259438319844851425269637999527925857006105822368722730417919484217155,
        7911783259438319844851425269637999527925857006105822368722730417919484226509,
        7911783259438319844851425269637999527925857006105822368722730417919484235863,
        7911783259438319844851425269637999527925857006105822368722730417919484245217,
        7911783259438319844851425269637999527925857006105822368722730417919484256623,
        7911783259438319844851425269637999527925857006105822368722730417919484255069,
        7911783259438319844851425269637999527925857006105822368722730417919484253515,
        7911783259438319844851425269637999527925857006105822368722730417919484251961,
        7911783259438319844851425269637999527925857006105822368722730417919484250407,
        7911783259438319844851425269637999527925857006105822368722730417919484248853
    ];
    assert_array_result(result.coeffs, expected);
}

#[test]
fn test_fq12_pow() {
    let p1 = FQ12Trait::from(
        array![
            51975646149777427225591377862541090934072341051232032113663076267066374577643,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12
        ]
    );
    let exp = 2;

    let result = p1.pow(exp);
    let expected = FQ12Trait::from(
        array![
            3694694732929005525306989102427897169267416215204057178125050022483020828232,
            10908398752556231902147859742848887938022563789247715490450964016458461750429,
            5418476692914710242098586741644694362685690105222661404331927077365079970552,
            21816797505112463804295719485697775876045127578495430980901928032916924433046,
            16326875445470942144246446484493582300708253894470376894782891093823542722304,
            10836953385829420484197173483289388725371380210445322808663854154730161048468,
            5347031326187898824147900482085195150034506526420268722544817215636779330135,
            21745352138385652386345033226138276663393943999693038299114818171188623638973,
            16255430078744130726295760224934083088057070315667984212995781232095241733885,
            10765508019102609066246487223729889512720196631642930126876744293001859823195,
            5275585959461087406197214222525695937383322947617876040757707353908477906644,
            21673906771658840968394346966578777450742760420890645617327708309460322192556
        ]
    );
    assert_array_result(result.coeffs, expected.coeffs);
}

